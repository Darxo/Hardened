::Hardened.wipeClass("scripts/skills/perks/perk_rf_exploit_opening");

::Hardened.HooksMod.hook("scripts/skills/perks/perk_rf_exploit_opening", function(q) {
	// Public
	q.m.HitChancePerStack <- 10;

	// Private
	q.m.Stacks <- 0;

	q.create <- function()
	{
		this.m.ID = "perk.rf_exploit_opening";
		this.m.Name = ::Const.Strings.PerkName.RF_ExploitOpening;
		this.m.Description = "This character is ready to exploit an opening in an attacker\'s stance who has missed an attack against this character.";
		this.m.Icon = "ui/perks/perk_rf_exploit_opening.png";
		this.m.IconMini = "perk_rf_exploit_opening_mini";
		this.m.Type = ::Const.SkillType.Perk | ::Const.SkillType.StatusEffect;
		this.m.Order = ::Const.SkillOrder.Perk;
	}

	q.getTooltip <- function()
	{
		local ret = this.skill.getTooltip();

		local hitchance = this.getHitchanceModifier();
		if (hitchance != 0)
		{
			ret.push({
				id = 10,
				type = "text",
				icon = "ui/icons/hitchance.png",
				text = ::MSU.Text.colorizeValue(hitchance, {AddSign = true, AddPercent = true}) + " [chance to hit|Concept.Hitchance]",
			});
		}

		return ret;
	}

	q.getName = @(__original) function()
	{
		local ret = __original();
		if (this.m.Stacks >= 1) ret += " (x" + this.m.Stacks + ")";
		return ret;
	}

	q.isHidden <- function()
	{
		return this.m.Stacks == 0;
	}

	q.onCombatFinished <- function()
	{
		this.skill.onCombatFinished();
		this.m.Stacks = 0;
	}

	q.onTargetHit = @(__original) function( _skill, _targetEntity, _bodyPart, _damageInflictedHitpoints, _damageInflictedArmor )
	{
		__original(_skill, _targetEntity, _bodyPart, _damageInflictedHitpoints, _damageInflictedArmor);
		if (_targetEntity != null)
		{
			local dirty = this.m.Stacks != 0;
			this.m.Stacks = 0;
			if (dirty) this.getContainer().getActor().setDirty(true);	// Otherwise the tooltip is sometimes not updated correctly
		}
	}

	q.onMissed <- function( _attacker, _skill )
	{
		if (this.getContainer().getActor().getMoraleState() != ::Const.MoraleState.Fleeing && _skill.isAttack() && _attacker != null && !_attacker.isAlliedWith(this.getContainer().getActor()))
		{
			this.m.Stacks += 1;
		}
	}

	q.onAnySkillUsed <- function( _skill, _targetEntity, _properties )
	{
		if (this.m.Stacks != 0 && _skill.isAttack())
		{
			_properties.MeleeSkill += this.getHitchanceModifier();
			_properties.RangedSkill += this.getHitchanceModifier();
		}
	}

	q.onGetHitFactors <- function( _skill, _targetTile, _tooltip )
	{
		if (this.m.Stacks != 0 && _skill.isAttack())
		{
			_tooltip.push({
				icon = "ui/tooltips/positive.png",
				text = ::MSU.Text.colorPositive((this.getHitchanceModifier()) + "% ") + this.getName(),
			});
		}
	}

// New Functions
	q.getHitchanceModifier <- function()
	{
		return this.m.Stacks * this.m.HitChancePerStack;
	}
});
